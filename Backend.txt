Backend:

models/Admin.js:
const mongoose = require('mongoose');

const adminSchema = new mongoose.Schema({
  username: { type: String, required: true, unique: true },
  email:    { type: String, required: true, unique: true },
  password: { type: String, required: true },
});

module.exports = mongoose.model('Admin', adminSchema);


models/Quiz.js:
const mongoose = require("mongoose");

const quizSchema = new mongoose.Schema({
  category: String,
  questions: [
    {
      text: String,
      options: [{ text: String, isCorrect: Boolean }],
    },
  ],
});

module.exports = mongoose.model("Quiz", quizSchema);


models/UserLogin.js:
const mongoose = require("mongoose");

const quizSchema = new mongoose.Schema({
  category: String,
  questions: [
    {
      text: String,
      options: [{ text: String, isCorrect: Boolean }],
    },
  ],
});

module.exports = mongoose.model("Quiz", quizSchema);


routes/adminlogin.js:
const express = require("express");
const jwt = require("jsonwebtoken");
const router = express.Router();
const Admin = require("../models/Admin");

const JWT_SECRET = process.env.ADMIN_JWT_SECRET || "secret";

// Admin Registration
router.post("/register", async (req, res) => {
  const { username, email, password } = req.body;

  try {
    const existingAdmin = await Admin.findOne({ $or: [{ email }, { username }] });
    if (existingAdmin) {
      return res.status(400).json({ message: "Admin already exists" });
    }

    const newAdmin = new Admin({ username, email, password });
    await newAdmin.save();

    res.status(201).json({ message: "Admin registered successfully" });
  } catch (err) {
    console.error("Admin registration error:", err);
    res.status(500).json({ message: "Server error" });
  }
});

// Admin Login
router.post("/login", async (req, res) => {
  const { email, password } = req.body;

  try {
    const admin = await Admin.findOne({ email });

    if (!admin || admin.password !== password) {
      return res.status(401).json({ message: "Invalid credentials" });
    }

    const token = jwt.sign({ id: admin._id, role: "admin", email: admin.email }, JWT_SECRET, {
      expiresIn: "2h",
    });

    res.json({ token, email: admin.email, username: admin.username });
  } catch (err) {
    console.error("Admin login error:", err);
    res.status(500).json({ message: "Server error" });
  }
});

module.exports = router;

routes/contact.js:
const express = require("express");
const router = express.Router();

// Simple contact endpoint
router.post("/", (req, res) => {
  const { name, email, message } = req.body;
  console.log("Contact message received:", { name, email, message });
  res.json({ message: "Thank you for contacting us. We will get back to you soon." });
});

module.exports = router;

routes/leaderboard.js:
const express = require("express");
const UserLogin = require("../models/UserLogin");

const router = express.Router();

// Return top scorers
router.get("/", async (req, res) => {
  try {
    const leaderboard = await UserLogin.find()
      .sort({ score: -1 })
      .select("name score -_id");
    res.json(leaderboard);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

module.exports = router;


routes/quiz.js:
const express = require("express");
const Quiz = require("../models/Quiz");

const router = express.Router();

// ✅ Static route should be placed first
router.get("/categories", async (req, res) => {
  try {
    const categories = await Quiz.distinct("category");
    res.json(categories);
  } catch (err) {
    console.error("❌ Error fetching categories:", err);
    res.status(500).json({ message: "Server error" });
  }
});

router.get("/:category", async (req, res) => {
  try {
    const categoryParam = req.params.category.trim(); // Sanitize
    const quizzes = await Quiz.find({
      category: { $regex: new RegExp(`^${categoryParam}$`, "i") }, // Case-insensitive
    });

    if (!quizzes.length) {
      return res.status(404).json({ message: "No quizzes found" });
    }

    const questions = quizzes.flatMap((quiz) => quiz.questions);
    res.json(questions);
  } catch (err) {
    console.error("❌ Error fetching questions:", err);
    res.status(500).json({ error: err.message });
  }
});


// Add a new quiz or append questions
router.post("/add-quiz", async (req, res) => {
  try {
    const { category, questions } = req.body;

    if (!category || !Array.isArray(questions) || questions.length === 0) {
      return res.status(400).json({ message: "Invalid quiz data" });
    }

    const formattedQuestions = questions.map(q => ({
      text: q.question,
      options: q.options.map(opt => ({
        text: opt,
        isCorrect: opt.trim().toLowerCase() === q.correctAnswer.trim().toLowerCase()
      }))
    }));

    let existingQuiz = await Quiz.findOne({ category });

    if (existingQuiz) {
      existingQuiz.questions.push(...formattedQuestions);
      await existingQuiz.save();
    } else {
      await Quiz.create({ category, questions: formattedQuestions });
    }

    res.status(201).json({ message: "✅ Quiz saved successfully" });
  } catch (err) {
    console.error("❌ Error saving quiz:", err);
    res.status(500).json({ message: "Server error" });
  }
});

module.exports = router;

routes/score.js:
const express = require("express");
const UserLogin = require("../models/UserLogin");

const router = express.Router();

// Save or accumulate score
router.post("/", async (req, res) => {
  try {
    const { email, score } = req.body;
    const user = await UserLogin.findOne({ email });
    console.log("📩 Received score data:", req.body);
    if (!user) return res.status(404).json({ message: "User not found" });

    user.score = (user.score || 0) + score;
    await user.save();
    res.json({ message: "Score updated", score: user.score });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

module.exports = router;

routes/userlogin.js:
const express = require("express");
const jwt = require("jsonwebtoken");
const UserLogin = require("../models/UserLogin");

const router = express.Router();
const JWT_SECRET = process.env.JWT_SECRET;

// Register
router.post("/register", async (req, res) => {
  try {
    const { name, email, password } = req.body;
    const exists = await UserLogin.findOne({ email });
    if (exists) return res.status(400).json({ message: "User already exists" });

    const newUser = new UserLogin({ name, email, password });
    await newUser.save();
    res.status(201).json({ message: "User registered successfully!" });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// Login
router.post("/login", async (req, res) => {
  try {
    const { email, password } = req.body;
    const user = await UserLogin.findOne({ email });
    if (!user || user.password !== password)
      return res.status(400).json({ message: "Invalid credentials" });

    const token = jwt.sign(
      { userId: user._id, name: user.name, email: user.email },
      JWT_SECRET,
      { expiresIn: "1h" }
    );
    res.json({ token, name: user.name, email: user.email });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

module.exports = router;


.env:
MONGO_URI=mongodb+srv://sai:sai123@quizapp.g2t9neo.mongodb.net/?retryWrites=true&w=majority&appName=quizapp
JWT_SECRET=your_jwt_secret_key
PORT=8000


server.js:
require('dotenv').config();
const express = require("express");
const mongoose = require("mongoose");
const cors = require("cors");

const AuthRoutes = require("./routes/userlogin");
const AdminAuthRoutes = require("./routes/adminlogin");
const QuizRoutes = require("./routes/quiz");
const ScoreRoutes = require("./routes/score");
const LeaderboardRoutes = require("./routes/leaderboards");
const ContactRoutes = require("./routes/contact");

const app = express();
app.use(cors());
app.use(express.json());

// Mount routes
app.use("/api/auth", AuthRoutes);
app.use("/api/auth/admin", AdminAuthRoutes);
app.use("/api/quiz", QuizRoutes);
app.use("/api/save-score", ScoreRoutes);
app.use("/api/leaderboard", LeaderboardRoutes);
app.use("/api/contact", ContactRoutes);

// Connect to MongoDB Atlas
mongoose
  .connect(process.env.MONGO_URI, {
    useNewUrlParser: true,
    useUnifiedTopology: true,
  })
  .then(() => console.log("✅ MongoDB Atlas connected"))
  .catch((err) => console.log("❌ MongoDB connection error:", err));

app.get("/", (req, res) => {
  res.send("🚀 Backend is running");
});



const PORT = process.env.PORT || 8000;
app.listen(PORT, () =>
  console.log(`🚀 Server is running on port ${PORT}`)
);



